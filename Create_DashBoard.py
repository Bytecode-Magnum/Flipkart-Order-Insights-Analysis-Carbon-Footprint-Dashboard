import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

df = pd.read_csv("Cleaned Flipkart Order List.csv")
df['Date'] = pd.to_datetime(df['Date'])


def center_text(fig, text):
    return fig.update_layout(
        # Set the background color with transparency (adjust the alpha value as needed)
        paper_bgcolor="rgba(0,0,0,0)",  # Transparent background
        plot_bgcolor="rgba(0,0,0,0)",
        font={'color': 'white', 'family': 'Century Gothic'},
        title=dict(text=text, x=0.5, font={'size': 25}),  # Center the title of the pie chart
        margin=dict(l=0, r=0, t=60, b=0)

        # Transparent plot area background
    )


# Load your dataset into a pandas DataFrame
# Replace 'your_dataset.csv' with the actual path to your dataset file.
years = [2019, 2020, 2021, 2022, 2023]
# Get the list of unique customer names and years
unique_customer_names = df['Customer_Name'].unique()
unique_years = years

# Initialize the Dash app
app = dash.Dash(__name__, external_stylesheets=['/assets/styles.css'])

# Define the app layout
app.layout = html.Div([
    html.H1("Flipkart Orders Data Analysis", style={'textAlign': 'center', 'color': 'white'}),
    html.H3("Analysis of Orders", style={'textAlign': 'center', 'color': 'white',
                                         'font-size': '50px', 'font-weight': 'bold', 'text-decoration': 'underline'}),
    html.H3("Select the Year and Customer Name from the dropdown",
            style={'textAlign': 'left', 'margin-top': '30px', 'color': 'white'}),

    # Dropdown for selecting the year and customer name
    dcc.Dropdown(
        id='year-dropdown',
        options=[{'label': year, 'value': year} for year in unique_years],
        value=None,  # Default to the first year in the dataset
        style={'width': '250px'},
        placeholder="Select a year"
    ),
    dcc.Dropdown(
        id='customer-dropdown',
        options=[{'label': customer, 'value': customer} for customer in unique_customer_names],
        value=None,  # Default to the first customer name in the dataset
        style={'width': '250px'},
        placeholder="Select a Customer Name"
    ),

    # First Pie Chart: Order Status by Year and Customer Name
    dcc.Graph(id='order-status-pie-chart', style={'margin-top': '00px'}),

    # Second Bar Graph: Total Price and Total Number of Orders by Year and Customer Name
    dcc.Graph(id='total-price-bar-graph', style={'margin-top': '100px'}),

    # Third Pie Chart: Total Number and Total Price of Orders by Company for a Selected Year
    dcc.Graph(id='company-orders-pie-chart', style={'margin-top': '100px'}),

    # Forth Bar Graph: Total Amount of Order In various years
    dcc.Graph(id='total-amount-order-bar',
              style={'margin-top': '100px', 'textAlign': 'center', 'text-decoration': 'underline'}),

    #: 5th number and amount of order from each of the category
    dcc.Graph(id='Order-by-Main-category', style={'margin-top': '100px', 'textAlign': 'center'}),

    html.H2("Analysis of Carbon Footprints", style={'textAlign': 'center', 'margin-top': '80px', 'color': 'white',
                                                    'font-size': '60px', 'font-weight': 'bold',
                                                    'text-decoration': 'underline'}),

    # sixth Bar Graph: average carbonn foot prints cvarious years
    dcc.Graph(id='average-carbon-footprint', style={'margin-top': '100px', 'textAlign': 'center'}),

    #: 7th carbon foot prints generated by main category each eyar
    dcc.Graph(id='Main-category-wise-footprint', style={'margin-top': '100px', 'textAlign': 'center'})])


# Define callback to update the first pie chart
@app.callback(
    Output('order-status-pie-chart', 'figure'),
    [Input('year-dropdown', 'value'), Input('customer-dropdown', 'value')]
)
def update_order_status_pie(selected_year, selected_customer):
    # Filter the data for the selected year and customer name
    filtered_df = df[(df.Date.dt.year == selected_year) & (df['Customer_Name'] == selected_customer)]

    # Create a pie chart for order status counts
    order_status_counts = filtered_df.groupby('Order_Status').agg({'price': 'sum', 'Order_Ids': 'count'})
    order_status_counts.rename(columns={'price': 'Total Amount', 'Order_Ids': 'count'}, inplace=True)

    fig = px.pie(
        order_status_counts,
        names=order_status_counts.index,
        values='count',
        title=f'Order Status for {selected_customer} in {selected_year}',
        hover_data=['Total Amount']

    )
    fig.update_traces(textposition='inside', textinfo='percent+label')
    center_text(fig, f'Order Status for {selected_customer} in {selected_year}')
    return fig


# Define callback to update the second bar graph
@app.callback(
    Output('total-price-bar-graph', 'figure'),
    [Input('year-dropdown', 'value'), Input('customer-dropdown', 'value')]
)
def update_total_price_bar(selected_year, selected_customer):
    # Filter the data for the selected year and customer name
    filtered_df = df[(df.Date.dt.year == selected_year) & (df['Customer_Name'] == selected_customer)]

    # Group the data by customer name and calculate the total price and total number of orders
    customer_orders = filtered_df.groupby('Month').agg(
        Total_Orders=pd.NamedAgg(column='Order_Ids', aggfunc='count'),
        Total_Price=pd.NamedAgg(column='price', aggfunc='sum')
    ).reset_index()

    fig = px.bar(
        customer_orders,
        x='Month',
        y='Total_Price',
        title=f'Total Orders and Total Price for {selected_customer} in {selected_year}',
        labels={'variable': 'Metric', 'value': 'Value'},
        color='Month',
        hover_data='Total_Orders',
        text_auto=True

    )
    center_text(fig, f'Total Orders and Total Price for {selected_customer} in {selected_year}')
    return fig


# Define callback to update the third pie chart
@app.callback(
    Output('company-orders-pie-chart', 'figure'),
    [Input('year-dropdown', 'value')]
)
def update_company_orders_pie(selected_year):
    # Filter the data for the selected year
    filtered_df = df[df.Date.dt.year == selected_year]

    # Group the data by company and calculate the total number and total price of orders
    company_orders = filtered_df.groupby('Company').agg(
        Total_Orders=pd.NamedAgg(column='Order_Ids', aggfunc='count'),
        Total_Price=pd.NamedAgg(column='price', aggfunc='sum')
    ).reset_index()
    company_orders = company_orders.nlargest(8, columns='Total_Price')
    company_orders
    # Combine the total number and total price as a label
    company_orders['Label'] = company_orders.apply(
        lambda row: f"{row['Company']}",
        axis=1
    )

    fig = px.pie(
        company_orders,
        names='Label',
        values='Total_Orders',
        title=f'Total Orders and Total Price by Company in {selected_year}',
        hover_data='Total_Price'
    )
    center_text(fig, f'Total Orders and Total Price by Company in {selected_year}')
    fig.update_traces(textposition='inside', textinfo='percent+label')
    return fig


#: setting the call back for the total amount order each year
@app.callback(
    dash.dependencies.Output("total-amount-order-bar", "figure"),
    dash.dependencies.Input("total-amount-order-bar", "relayoutData")
)
def total_sales_year(relayoutData):
    filtered_data = df.loc[df.Order_Status == 'DELIVERED']
    filtered_data = filtered_data.groupby(df.Date.dt.year).agg({'price': 'sum', 'Order_Ids': 'count'})
    filtered_data.rename(columns={'price': 'Total Amount', 'Order_Ids': 'Total_orders'}, inplace=True)
    filtered_data.index.name = 'Year'
    fig = px.bar(
        filtered_data,
        x=filtered_data.index,
        y="Total Amount",
        title="Total Delivered Amount of Order by Year",
        hover_data=['Total_orders'],
        color='Total Amount', text_auto=True
    )
    #     center_text(fig,"Total Delivered Amount of Order by Year")
    center_text(fig, "Total Delivered Amount of Order by Year")
    fig.show()
    return fig


#: order by main cateogry
@app.callback(
    Output('Order-by-Main-category', 'figure'),
    [Input('year-dropdown', 'value')]
)
def update_order_status_pie(selected_year):
    filtered_data = df.loc[df.Date.dt.year == 2022]
    filtered_data = filtered_data.groupby('Main_category').agg({'price': 'sum', 'Order_Ids': 'count'})
    filtered_data.rename(columns={'price': 'Total Amount', 'Order_Ids': 'Count'}, inplace=True)
    filtered_data = filtered_data.nlargest(10, columns='Count')
    filtered_data
    fig = px.bar(data_frame=filtered_data, x=filtered_data.index, y='Count', color='Count', hover_data=['Total Amount'],
                 text_auto=True,
                 title=f'Order by Main Cateogry in year {selected_year}')
    center_text(fig, f'Order by Main Cateogry in year {selected_year}')
    fig.show()
    return fig


#: setting the call back for average carbon foot print each year
@app.callback(
    dash.dependencies.Output('average-carbon-footprint', 'figure'),
    dash.dependencies.Input('average-carbon-footprint', 'relayoutData'))
def average_footprint(relayoutData):
    filtered_data = df.loc[df.Order_Status == 'DELIVERED']
    filtered_data = filtered_data.groupby(filtered_data.Date.dt.year).agg({'Average Carbon Footprints': 'mean'})
    filtered_data.index.name = 'Year'
    filtered_data
    fig = px.bar(data_frame=filtered_data, x=filtered_data.index, y='Average Carbon Footprints',
                 title='Aveage Carbon Footprint 2019-2023', text_auto=True,
                 color='Average Carbon Footprints')
    center_text(fig, 'Aveage Carbon Footprint 2019-2023')
    fig.show()
    return fig


#: setting the calback for mean carbn footprint generated by main category each year
@app.callback(
    Output('Main-category-wise-footprint', 'figure'),
    [Input('year-dropdown', 'value')])
def category_wise_footprint(selected_year):
    filtered_data = df.loc[df.Order_Status == 'DELIVERED']
    filtered_data = filtered_data.loc[filtered_data.Date.dt.year == selected_year]
    filtered_data = filtered_data.groupby('Main_category').agg({'Average Carbon Footprints': 'mean'}).nlargest(10,
                                                                                                               columns=[
                                                                                                                   'Average Carbon Footprints'])
    fig = px.bar(filtered_data, x=filtered_data.index, y='Average Carbon Footprints', color='Average Carbon Footprints',
                 text_auto=True,
                 title=f'Category wise Carbon Footprint in {selected_year}')
    center_text(fig, f'Category wise Carbon Footprint in {selected_year}')
    return fig


if __name__ == '__main__':
    app.run_server(port=9090, debug=True)
